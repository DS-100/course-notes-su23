{"title":"Pandas I","markdown":{"yaml":{"title":"Pandas I","format":{"html":{"toc":true,"toc-depth":5,"toc-location":"right","code-fold":false,"theme":["cosmo","cerulean"],"callout-icon":false}},"jupyter":"python3"},"headingText":"Learning Outcomes","containsRefs":false,"markdown":"\n\n::: {.callout-note collapse=\"true\"}\n\n- Build familiarity with basic `pandas` syntax\n- Learn key data structures: DataFrames, Series, and Indices\n- Understand methods for extracting data: `.loc`, `.iloc`, and `[ ]`\n:::\n\nIn this sequence of lectures, we will dive right into things by having you explore and manipulate real-world data. To do so, we'll introduce `pandas`, a popular Python library for interacting with **tabular data**.\n\n## Tabular Data\n\nData scientists work with data stored in a variety of formats. The primary focus of this class is in understanding *tabular data* –– data that is stored in a table. \n\nTabular data is one of the most common systems that data scientists use to organize data. This is in large part due to the simplicity and flexibility of tables. Tables allow us to represent each **observation**, or instance of collecting data from an individual, as its own row. We can record distinct characteristics, or **features**, of each observation in separate columns. \n\nTo see this in action, we'll explore the `elections` dataset, which stores information about political candidates who ran for president of the United States in various years.\n\n```{python}\n#| code-fold: true\nimport pandas as pd\npd.read_csv(\"data/elections.csv\")\n```\n\nIn the `elections` dataset, each row represents one instance of a candidate running for president in a particular year. For example, the first row represents Andrew Jackson running for president in the year 1824. Each column represents one characteristic piece of information about each presidential candidate. For example, the column named \"Result\" stores whether or not the candidate won the electon. \n\nYour work in Data 8 helped you grow very familiar with using and interpreting data stored in a tabular format. Back then, you used the `Table` class of the `datascience` library, a special programming library specifically for Data 8 students.\n\nIn Data 100, we will be working with the programming library `pandas`, which is generally accepted in the data science community as the industry- and academia-standard tool for manipulating tabular data (as well as the inspiration for Petey, our panda bear mascot).\n\n## DataFrames, Series, and Indices\n\nTo begin our studies in `pandas`, we must first import the library into our Python environment. This will allow us to use `pandas` data structures and methods in our code.\n\n```{python}\n# `pd` is the conventional alias for Pandas, as `np` is for NumPy\nimport pandas as pd\n```\n\nThere are three fundamental data structures in `pandas`:\n\n1. **Series**: 1D labeled array data; best thought of as columnar data\n2. **DataFrame**: 2D tabular data with rows and columns\n3. **Index**: A sequence of row/column labels\n\nDataFrames, Series, and Indices can be represented visually in the following diagram, which considers the first few rows of the `elections` dataset.\n\n![](images/data_structure.png)\n\nNotice how the **DataFrame** is a two-dimensional object -- it contains both rows and columns. The **Series** above is a singular column of this DataFrame, namely, the `Result` column. Both contain an **Index**, or a shared list of row labels (here, the integers from 0 to 4, inclusive).\n\n### Series\n\nA Series represents a column of a DataFrame; more generally, it can be any 1-dimensional array-like object containing values of the same type with associated data labels, called its index. In the cell below, we create a Series named `s`.\n\n```{python}\ns = pd.Series([-1, 10, 2])\ns\n```\n\n```{python}\ns.values # Data contained within the Series\n```\n\n```{python}\ns.index # The Index of the Series\n```\n\nBy default, the Index of a Series is a sequential list of integers beginning from 0. Optionally, a manually-specified list of desired indices can be passed to the `index` argument.\n\n```{python}\ns = pd.Series([-1, 10, 2], index = [\"a\", \"b\", \"c\"])\ns\n```\n\nIndices can also be changed after initialization.\n\n```{python}\ns.index = [\"first\", \"second\", \"third\"]\ns\n```\n\n#### Selection in Series\n\nMuch like when working with NumPy arrays, we can select a single value or a set of values from a Series. There are 3 primary methods of selecting data.\n\n1. A single index label\n2. A list of index labels\n3. A filtering condition\n\nTo demonstrate this, let's define the Series `ser`.\n\n```{python}\nser = pd.Series([4, -2, 0, 6], index = [\"a\", \"b\", \"c\", \"d\"])\nser\n```\n\n##### A Single Index Label\n\n```{python}\nser[\"a\"] # We return the value stored at the Index label \"a\"\n```\n\n##### A List of Index Labels\n\n```{python}\nser[[\"a\", \"c\"]] # We return a *Series* of the values stored at labels \"a\" and \"c\"\n```\n\n##### A Filtering Condition\n\nPerhaps the most interesting (and useful) method of selecting data from a Series is with a filtering condition. \n\nFirst, we apply a boolean condition to the Series. This create **a new Series of boolean values**. \n\n```{python}\nser > 0 # Filter condition: select all elements greater than 0\n```\n\nWe then use this boolean condition to index into our original Series. `pandas` will select only the entries in the original Series that satisfy the condition. \n\n```{python}\nser[ser > 0] \n```\n\n### DataFrames\n\nIn Data 8, you represented tabular data using the `Table` class of the `datascience` library. In Data 100, we'll be using the `DataFrame` class of the `pandas` library.\n\nWith our new understanding of `pandas` in hand, let's return to the `elections` dataset from before. Now, we recognize that it is represented as a `pandas` DataFrame. \n\n```{python}\nimport pandas as pd\n\nelections = pd.read_csv(\"data/elections.csv\")\nelections\n```\n\nLet's dissect the code above. \n\n1. We first import the ````pandas```` library into our Python environment, using the alias `pd`. <br> &emsp;```` import pandas as pd ````\n\n2. There are a number of ways to read data into a DataFrame. In Data 100, our datasets are typically stored in a CSV (comma-seperated values) file format. We can import a CSV file into a DataFrame by passing the data path as an argument to the following ````pandas```` function. \n<br> &emsp;```` pd.read_csv(\"data/elections.csv\") ```` \n\nThis code stores our DataFrame object in the ````elections```` variable. We see that our ````elections```` DataFrame has 182 rows and 6 columns (`Year`, `Candidate`, `Party`, `Popular Vote`, `Result`, `%`). Each row represents a single record -- in our example, a presedential candidate from some particular year. Each column represents a single attribute, or feature of the record.\n\nIn the example above, we constructed a DataFrame object using data from a CSV file. As we'll explore in the next section, we can also create a DataFrame with data of our own.\n\n#### Creating a DataFrame\n\nThere are many ways to create a DataFrame. Here, we will cover the most popular approaches.\n\n1. Using a list and column names\n2. From a dictionary\n3. From a Series\n\n##### Using a List and Column Names\n\nConsider the following examples. The first code cell creates a DataFrame with a single column `Numbers`. The second creates a DataFrame with the columns `Numbers` and `Description`. Notice how a 2D list of values is required to initialize the second DataFrame -- each nested list represents a single row of data.\n\n```{python}\ndf_list_1 = pd.DataFrame([1, 2, 3], columns=[\"Numbers\"])\ndf_list_1\n```\n\n```{python}\ndf_list_2 = pd.DataFrame([[1, \"one\"], [2, \"two\"]], columns = [\"Number\", \"Description\"])\ndf_list_2\n```\n\n##### From a Dictionary\n\nA second (and more common) way to create a DataFrame is with a dictionary. The dictionary keys represent the column names, and the dictionary values represent the column values.\n\n```{python}\ndf_dict = pd.DataFrame({\"Fruit\": [\"Strawberry\", \"Orange\"], \"Price\": [5.49, 3.99]})\ndf_dict\n```\n\n##### From a Series\n\nEarlier, we noted that a Series is usually thought of as a column in a DataFrame. It follows then, that a DataFrame is equivalent to a collection of Series, which all share the same index. \n\nIn fact, we can initialize a DataFrame by merging two or more Series.\n\n```{python}\n# Notice how our indices, or row labels, are the same\n\ns_a = pd.Series([\"a1\", \"a2\", \"a3\"], index = [\"r1\", \"r2\", \"r3\"])\ns_b = pd.Series([\"b1\", \"b2\", \"b3\"], index = [\"r1\", \"r2\", \"r3\"])\n\npd.DataFrame({\"A-column\": s_a, \"B-column\": s_b})\n```\n\n### Indices\n\nThe major takeaway: we can think of a **DataFrame** as a collection of **Series** that all share the same **Index**.\n\nOn a more technical note, an Index doesn't have to be an integer, nor does it have to be unique. For example, we can set the index of the `elections` Dataframe to be the name of presidential candidates.\n\n```{python}\n# This sets the index to be the \"Candidate\" column\nelections.set_index(\"Candidate\", inplace=True)\nelections.index\n```\n\nAnd, if we'd like, we can revert the index back to the default list of integers.\n\n```{python}\n# This resets the index to be the default list of integers\nelections.reset_index(inplace=True) \nelections.index\n```\n\n## Slicing in DataFrames\n\nNow that we've learned how to create DataFrames, let's dive more deeply into their capabilities. \n\nThe API (application programming interface) for the DataFrame class is enormous. In this section, we'll discuss several methods of the DataFrame API that allow us to extract subsets of data.\n\nThe simplest way to manipulate a DataFrame is to extract a subset of rows and columns, known as **slicing**. We will do so with four primary methods of the DataFrame class:\n\n1. `.head` and `.tail`\n2. `.loc`\n3. `.iloc`\n4. `[]`\n\n### Extracting data with `.head` and `.tail`\nThe simplest scenario in which we want to extract data is when we simply want to select the first or last few rows of the DataFrame. \n\nTo extract the first `n` rows of a DataFrame `df`, we use the syntax `df.head(n)`.\n\n```{python}\n# Extract the first 5 rows of the DataFrame\nelections.head(5)\n```\n\nSimilarly, calling `df.tail(n)` allows us to extract the last `n` rows of the DataFrame.\n\n```{python}\n# Extract the last 5 rows of the DataFrame\nelections.tail(5)\n```\n\n### Indexing with .loc\n\nThe `.loc` operator selects rows and columns in a DataFrame by their row and column label(s), respectively. The **row labels** (commonly referred to as the **indices**) are the bold text on the far *left* of a DataFrame, while the **column labels** are the column names found at the *top* of a DataFrame.\n\nTo grab data with `.loc`, we must specify the row and column label(s) where the data exists. The row labels are the first argument to the `.loc` function; the column labels are the second. For example, we can select the the row labeled `0` and the column labeled `Candidate` from the `elections` DataFrame.\n\n```{python}\nelections.loc[0, 'Candidate']\n```\n\nTo select *multiple* rows and columns, we can use Python slice notation. Here, we select the rows from labels `0` to `3` and the columns from labels `\"Year\"` to `\"Popular vote\"`.\n\n```{python}\nelections.loc[0:3, 'Year':'Popular vote']\n```\n\nSuppose that instead, we wanted *every* column value for the first four rows in the `elections` DataFrame. The shorthand `:` is useful for this.\n\n```{python}\nelections.loc[0:3, :]\n```\n\nThere are a couple of things we should note. Firstly, unlike conventional Python, Pandas allows us to slice string values (in our example, the column labels). Secondly, slicing with `.loc` is *inclusive*. Notice how our resulting DataFrame includes every row and column between and including the slice labels we specified.\n\nEquivalently, we can use a list to obtain multiple rows and columns in our `elections` DataFrame. \n\n```{python}\nelections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']]\n```\n\nLastly, we can interchange list and slicing notation.\n\n```{python}\nelections.loc[[0, 1, 2, 3], :]\n```\n\n### Indexing with .iloc\n\nSlicing with `.iloc` works similarily to `.loc`, however, `.iloc` uses the *index positions* of rows and columns rather the labels (think to yourself: **l**oc uses **l**abels; **i**loc uses **i**ndices). The arguments to the `.iloc` function also behave similarly -– single values, lists, indices, and any combination of these are permitted. \n\nLet's begin reproducing our results from above. We'll begin by selecting for the first presidential candidate in our `elections` DataFrame:\n\n```{python}\n# elections.loc[0, \"Candidate\"] - Previous approach\nelections.iloc[0, 1]\n```\n\nNotice how the first argument to both `.loc` and `.iloc` are the same. This is because the row with a label of 0 is conveniently in the 0^th^ index (equivalently, the first position) of the `elections` DataFrame. Generally, this is true of any DataFrame where the row labels are incremented in ascending order from 0.\n\nHowever, when we select the first four rows and columns using `.iloc`, we notice something.\n\n```{python}\n# elections.loc[0:3, 'Year':'Popular vote'] - Previous approach\nelections.iloc[0:4, 0:4]\n```\n\nSlicing is no longer inclusive in `.iloc` -– it's *exclusive*. In other words, the right-end of a slice is not included when using `.iloc`. This is one of the subtleties of `pandas` syntax; you will get used to it with practice.\n\nList behavior works just as expected.\n\n```{python}\n#elections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']] - Previous Approach\nelections.iloc[[0, 1, 2, 3], [0, 1, 2, 3]]\n```\n\nThis discussion begs the question: when should we use `.loc` vs `.iloc`? In most cases, `.loc` is generally safer to use. You can imagine `.iloc` may return incorrect values when applied to a dataset where the ordering of data can change. \n\n### Indexing with []\n\nThe `[]` selection operator is the most baffling of all, yet the most commonly used. It only takes a single argument, which may be one of the following:\n\n1. A slice of row numbers\n2. A list of column labels\n3. A single column label\n\nThat is, `[]` is *context dependent*. Let's see some examples.\n\n#### A slice of row numbers\n\nSay we wanted the first four rows of our `elections` DataFrame.\n\n```{python}\nelections[0:4]\n```\n\n#### A list of column labels\n\nSuppose we now want the first four columns.\n\n```{python}\nelections[[\"Year\", \"Candidate\", \"Party\", \"Popular vote\"]]\n```\n\n#### A single column label\n\nLastly, `[ ]` allows us to extract only the `Candidate` column.\n\n```{python}\nelections[\"Candidate\"]\n```\n\nThe output is a Series! In this course, we'll become very comfortable with `[]`, especially for selecting columns. In practice, `[]` is much more common than `.loc`.\n\n## Parting Note\n\nThe `pandas` library is enormous and contains many useful functions. Here is a link to [documentation](https://pandas.pydata.org/docs/). We certainly don't expect you to memorize each and every method of the library.\n\nThe introductory Data 100 `pandas` lectures will provide a high-level view of the key data structures and methods that will form the foundation of your `pandas` knowledge. A goal of this course is to help you build your familiarity with the real-world programming practice of...Googling! Answers to your questions can be found in documentation, Stack Overflow, etc. Being able to search for, read, and implement documentation is an important life skill for any data scientist.\n\nWith that, let's move on to Pandas II.\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":5,"output-file":"pandas_1.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.280","theme":"cosmo","callout-icon":false,"title":"Pandas I","jupyter":"python3","toc-location":"right"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"pandas_1.pdf"},"language":{},"metadata":{"block-headings":true,"title":"Pandas I","jupyter":"python3"},"extensions":{"book":{}}}}}